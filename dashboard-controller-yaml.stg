/*
 * Mandatory:
 *
 * vars.dashboard.image.version
 * vars.dashboard.image.name
 * vars.dashboard.limits.cpu
 * vars.dashboard.limits.memory
 * vars.dashboard.requests.cpu
 * vars.dashboard.requests.memory
 *
 * Optional:
 *
 * vars.dashboard.affinity.key
 * vars.dashboard.affinity.name
 * vars.dashboard.affinity.required
 * vars.dashboard.allowOnMaster
 * vars.dashboard.tolerations[].effect
 * vars.dashboard.tolerations[].key
 * vars.dashboard.tolerations[].value
 */

import "_affinities.stg"
import "_tolerations.stg"

/*
 *
 */
dashboard-controller-yaml(parent, vars) ::= <<
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-dashboard
  namespace: kube-system
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      priorityClassName: system-cluster-critical
      containers:
      - name: kubernetes-dashboard
        image: <vars.dashboard.image.name>:<vars.dashboard.image.version>
        resources:
<if(vars.dashboard.limits)>
            limits:
              <if(vars.dashboard.limits.cpu)>cpu: <vars.dashboard.limits.cpu><endif>
              <if(vars.dashboard.limits.memory)>memory: <vars.dashboard.limits.memory><endif>
<endif>
<if(vars.dashboard.requests)>
            requests:
              <if(vars.dashboard.requests.cpu)>cpu: <vars.dashboard.requests.cpu><endif>
              <if(vars.dashboard.requests.memory)>memory: <vars.dashboard.requests.memory><endif>
<endif>
        ports:
        - containerPort: 8443
          protocol: TCP
        args:
          # PLATFORM-SPECIFIC ARGS HERE
          - --auto-generate-certificates
        volumeMounts:
        - name: kubernetes-dashboard-certs
          mountPath: /certs
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: kubernetes-dashboard-certs
        secret:
          secretName: kubernetes-dashboard-certs
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        <tolerationMasterEntry(parent, vars, vars.dashboard.allowOnMaster)>
<if(vars.dashboard.tolerations)>
        <tolerationsEntry(parent, vars, vars.dashboard.tolerations)>
<endif>
<if(vars.dashboard.affinity)>
      <affinitiesGroup(parent, vars, vars.dashboard.affinity)>
<endif>

>>
